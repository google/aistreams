// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "aistreams/proto/types/packet_type.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

package aistreams;

message ServerMetadata {
  // The offset position for the packet in its stream.
  int64 offset = 1;

  // The timestamp at which the stream server receives this packet. This is
  // based on the local clock of on the server side. It is guaranteed to be
  // monotonically increasing for the packets within each session; however
  // this timestamp is not comparable across packets sent to the same stream
  // different sessions. Session here refers to one individual gRPC streaming
  // request to the stream server.
  google.protobuf.Timestamp timestamp = 2;
}

// This stores all semantic and metadata related one Packet.
message PacketHeader {
  // The timestamp at which the Packet was created.
  google.protobuf.Timestamp timestamp = 1;

  // The type of the payload.
  PacketType type = 2;

  // This field is for users to attach additional custom data.
  //
  // Each custom user data (addendum) is an entry in this map. When you attach a
  // new addendum, make sure to choose a key that is not already present. Do not
  // delete any entries other than those that you own.
  map<string, google.protobuf.Any> addenda = 3;

  // The tracing context for distributed tracing.
  string trace_context = 4;

  // Metadata that the server appends to each packet before sending it to
  // receivers. You don't need to set value for this field when sending packets.
  ServerMetadata server_metadata = 5;

  // Packet flag set.
  int32 flags = 6;
}

// The quanta of datum that a stream accepts.
//
// Example
// -------
// For a Packet that contains a jpeg, the header will set packet_type to JPEG
// and the payload will store the compressed jpeg bytes as a binary string.
message Packet {
  PacketHeader header = 1;
  bytes payload = 2;
}
